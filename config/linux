vplatform = linux
so = so
lib_cflags = -DC_NA=1 -fPIC
lib_lflags = -shared -lm
con_cflags = 
con_lflags = -lm -ldl

ifeq (@(CLANG),y)
 CC = clang
 CC += -Wno-parentheses -Wno-unused-value -Wno-pointer-sign
 CC += -Wno-empty-body -Wno-return-type -Wno-constant-logical-operand
 CC += -Wno-comment -Wno-string-plus-int -Wno-unsequenced
 optlevel = -O1
else
 CC = gcc
 optlevel = -O2
endif

ifeq (@(X86_64),y)
 lib_cflags += -D_UNIX64
else
 lib_cflags += -m32
 lib_lflags += -m32
 con_cflags += -m32
 con_lflags += -m32
endif

ifeq (@(READLINE),y)
 con_cflags += -DREADLINE
 con_lflags += -lreadline
endif

ifeq (@(RELEASE),n)
 lib_cflags += -O0 -g3 -ggdb3 -gdwarf-4 -DDEBUG
 con_cflags += -O0 -g3 -ggdb3 -gdwarf-4
else
 lib_cflags += $(optlevel) -fomit-frame-pointer
 con_cflags += $(optlevel) -fomit-frame-pointer
endif

jver = src/libj/jver.h
libj = bin/libj.so
jcon = bin/jconsole
defdir = src/libj/defs

# version
: |> config/jversion.sh $(vrelease) $(varch) $(vlink) $(vplatform) > $(jver) |> $(jver)

# libj
: foreach $(src_lib) | $(jver) |> ^ CC %f^ $(CC) $(lib_cflags) -c %f -o %o |> build/%B.o {libj}
: {libj} |> ^ LINK %f^ $(CC) %f -o %o $(lib_lflags) |> $(libj)

# profile
: foreach src/jconsole/*.ijs |> ^ COPY %f ==> %o^ cp %f %o |> bin/%b {prof}

# jconsole
: foreach $(src_con) |> ^ CC %f^ $(CC) $(con_cflags) -Isrc/libj -c %f -o %o |> build/%B.o {jconsole}
: {jconsole} | $(libj) {prof} |> ^ LINK %f^ $(CC) %f -o %o $(con_lflags) |> $(jcon)

# defs
: foreach $(defdir)/*.sym | $(libj) $(jcon) {prof} |> ^ SYM2IJS %f^ $(jcon) -sym2ijs $(defdir)/ %B |> $(defdir)/%B.c
: foreach $(defdir)/*.c |> ^ CC %f^ $(CC) %f -o %o |> bin/%B {defs}
: foreach {defs} |> ^ DEFS %f^ %f > %o |> bin/%B.ijs

# test dll
: test/dll/tsdll.c |> ^ CC %f^ $(CC) %f -shared -fPIC -o %o |> bin/%B.$(so)

